"use strict";(self.webpackChunkregla_docs=self.webpackChunkregla_docs||[]).push([[2767],{8453:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>a});var r=s(6540);const t={},c=r.createContext(t);function d(e){const n=r.useContext(c);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),r.createElement(c.Provider,{value:n},e.children)}},9080:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>i,contentTitle:()=>a,default:()=>h,frontMatter:()=>d,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"code-breakdown/by-file/db-connect","title":"db_connect.py","description":"This file consists of code that handles database connection and update.","source":"@site/docs/code-breakdown/by-file/db-connect.md","sourceDirName":"code-breakdown/by-file","slug":"/code-breakdown/by-file/db-connect","permalink":"/edelweiss-documenation/docs/code-breakdown/by-file/db-connect","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"db_connect.py","sidebar_position":1},"sidebar":"tutorialSidebar","next":{"title":"import_data_from_db.py","permalink":"/edelweiss-documenation/docs/code-breakdown/by-file/import-data-from-db"}}');var t=s(4848),c=s(8453);const d={title:"db_connect.py",sidebar_position:1},a="\ud83d\udcc2 File : db_connect.py",i={},o=[{value:"<strong>\u2699\ufe0f get_connection()</strong>",id:"\ufe0f-get_connection",level:2},{value:"<strong>\u2699\ufe0f append_dataframe_to_sql(conn, dataframe, table_name, status)</strong>",id:"\ufe0f-append_dataframe_to_sqlconn-dataframe-table_name-status",level:2},{value:"<strong>\u2699\ufe0f update_log(conn, table_name, enddate, status, message, activity_code)</strong>",id:"\ufe0f-update_logconn-table_name-enddate-status-message-activity_code",level:2},{value:"<strong>\u2699\ufe0f delete_data(conn, table_name, activity_code)</strong>",id:"\ufe0f-delete_dataconn-table_name-activity_code",level:2}];function l(e){const n={admonition:"admonition",blockquote:"blockquote",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,c.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"-file--db_connectpy",children:"\ud83d\udcc2 File : db_connect.py"})}),"\n",(0,t.jsx)(n.p,{children:"This file consists of code that handles database connection and update."}),"\n",(0,t.jsx)(n.h2,{id:"\ufe0f-get_connection",children:(0,t.jsx)(n.strong,{children:"\u2699\ufe0f get_connection()"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def get_connection() -> psycopg2.extensions.connection | None:\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Function Description"}),(0,t.jsx)(n.br,{}),"\n","This function establishes a connection to a PostgreSQL database using predefined credentials."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)("span",{class:"bold-large",children:(0,t.jsx)(n.strong,{children:"\ud83d\udccc Parameters"})}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Name"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.em,{children:"None"})}),(0,t.jsx)(n.td,{children:"-"}),(0,t.jsx)(n.td,{children:"This function does not take any arguments."})]})})]}),"\n",(0,t.jsx)("span",{class:"bold-large",children:(0,t.jsx)(n.strong,{children:"\ud83d\udccc Outputs"})}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"psycopg2.extensions.connection"})}),(0,t.jsx)(n.td,{children:"A valid PostgreSQL connection object."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"none"})}),(0,t.jsx)(n.td,{children:"Returned if the connection attempt fails."})]})]})]}),"\n",(0,t.jsx)("span",{class:"bold-large",children:(0,t.jsx)(n.strong,{children:"\ud83d\udccc Raises"})}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Error Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"psycopg2.Error"})}),(0,t.jsx)(n.td,{children:"Raised when the function encounters an issue while connecting to the database."})]})})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)("span",{class:"bold-large",children:(0,t.jsx)(n.strong,{children:"\ud83d\udd37 Step 1 : Attempt to Establish a Database Connection"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"conn = psycopg2.connect(\r\n    user=postgres_user,\r\n    password=postgres_password,\r\n    host=postgres_host,\r\n    port=postgres_port,\r\n    database=postgres_db\r\n)\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Connects to PostgreSQL using credentials stored in global variables."}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Why are credentials stored in global variables?"}),(0,t.jsx)(n.br,{}),"\n","To centralize configuration management and enhance security by avoiding hardcoded values."]})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)("span",{class:"bold-large",children:(0,t.jsx)(n.strong,{children:"\ud83d\udd37 Step 2 : Handling Connection Errors"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'except (Exception, psycopg2.Error) as error:\r\n    print("Error while connecting to PostgreSQL", error)\r\n    return None\n'})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Catches any exceptions raised during connection attempts and prints the error message."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"\ufe0f-append_dataframe_to_sqlconn-dataframe-table_name-status",children:(0,t.jsx)(n.strong,{children:"\u2699\ufe0f append_dataframe_to_sql(conn, dataframe, table_name, status)"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def append_dataframe_to_sql(conn, dataframe, table_name, status):\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Function Description"}),(0,t.jsx)(n.br,{}),"\n","This function inserts dataframe into database."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)("span",{class:"bold-large",children:(0,t.jsx)(n.strong,{children:"\ud83d\udccc Parameters"})}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Name"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"conn"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"psycopg2.extensions.connection"})}),(0,t.jsx)(n.td,{children:"Database connection object."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"dataframe"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"pandas.DataFrame"})}),(0,t.jsx)(n.td,{children:"Contains dataframe that are going to be appended."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"table_name"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"Destination table."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"status"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"Activity status."})]})]})]}),"\n",(0,t.jsx)("span",{class:"bold-large",children:(0,t.jsx)(n.strong,{children:"\ud83d\udccc Raises"})}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Error Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"psycopg2.Error"})}),(0,t.jsx)(n.td,{children:"Error in data appending process."})]})})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)("span",{class:"bold-large",children:(0,t.jsx)(n.strong,{children:"\ud83d\udd37 Step 1 : Status Check"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"try:\r\nif status != 'cancelled':\r\ncursor = conn.cursor()\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Check passed status, if it is \u2018cancelled\u2019 data insertion is skipped."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)("span",{class:"bold-large",children:(0,t.jsx)(n.strong,{children:"\ud83d\udd37 Step 2 : Check for Existing Record"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"existing_query = \"SELECT activity_code FROM %s WHERE activity_code = %%s LIMIT 1\" % table_name\r\nmodelid = str(dataframe['activity_code'].iloc[0])\r\nprint(existing_query, modelid)\r\ncursor.execute(existing_query, (modelid,))\r\nexisting_records = cursor.fetchall()\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Checking if records with the same activity code already exists in the table."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)("span",{class:"bold-large",children:(0,t.jsx)(n.strong,{children:"\ud83d\udd37 Step 3 : Delete Existing Record"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"if len(existing_records) > 0:\r\n    delete_query = 'DELETE FROM %s WHERE activity_code = %%s' % table_name\r\n    print(delete_query)\r\n    cursor.execute(delete_query, (modelid,))\r\nelse:\r\n    print('NO EXISTING RECORDS FOR activity_code:', modelid)\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"If a record with activity code exists then remove the record before inserting the new data."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)("span",{class:"bold-large",children:(0,t.jsx)(n.strong,{children:"\ud83d\udd37 Step 4 : Data Conversion"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"dataframe.fillna(0, inplace=True)\r\ndata = [tuple(row) for row in dataframe.values]\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Replaces any NaN values in dataframe and converts the rows into tuples."}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Why do we need to clean and convert the data?"}),(0,t.jsx)(n.br,{}),"\n","To ensure database compatibility and data insertion efficiency."]})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)("span",{class:"bold-large",children:(0,t.jsx)(n.strong,{children:"\ud83d\udd37 Step 5 : Construct Insertion Query"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"insert_sql = f\"\"\"\r\n    INSERT INTO {table_name} ({', '.join(dataframe.columns)})\r\n    VALUES ({', '.join(['%s'] * len(dataframe.columns))})\r\n\"\"\"\r\nprint(insert_sql)\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Writes a query for dataframe insertion into the destination table."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)("span",{class:"bold-large",children:(0,t.jsx)(n.strong,{children:"\ud83d\udd37 Step 6 : Batch Insertion"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"batch_size = 50000\r\nfast_executemany = True\r\nfor i in range(0, len(data), batch_size):\r\n    batch_data = data[i:i + batch_size]\r\n    cursor.executemany(insert_sql, batch_data)\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["Inserting data in batches while ",(0,t.jsx)(n.code,{children:"executemany"})," ensures faster data insertion and efficiency."]}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Why do we insert data in batches?"}),(0,t.jsx)(n.br,{}),"\n","For optimization in handling large datasets. It reduces network overhead, improves database server efficiency."]})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)("span",{class:"bold-large",children:(0,t.jsx)(n.strong,{children:"\ud83d\udd37 Step 7 : Commit and Success Message"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'conn.commit()\r\nprint(f"Data from DataFrame appended to the {table_name} table successfully.")\r\n"""\r\nprint(insert_sql)\n'})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Commit data append, making permanent changes in the database and return success message."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)("span",{class:"bold-large",children:(0,t.jsx)(n.strong,{children:"\ud83d\udd37 Step 8 : Error Handling"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'except psycopg2.Error as e:\r\n    print(f"Error appending data to SQL: {e}")\r\n    conn.rollback()\n'})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Shows error message if an error occured in data insertion. Rollback is done to prevent partial data insertion."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)("span",{class:"bold-large",children:(0,t.jsx)(n.strong,{children:"\ud83d\udd37 Step 9 : Cursor Closure"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"finally:\r\n    cursor.close()\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Ensures that cursor is closed at the end of the data insertion process, even when error occurs."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"\ufe0f-update_logconn-table_name-enddate-status-message-activity_code",children:(0,t.jsx)(n.strong,{children:"\u2699\ufe0f update_log(conn, table_name, enddate, status, message, activity_code)"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def update_log(conn, table_name, enddate, status, message, activity_code):\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Function Description"}),(0,t.jsx)(n.br,{}),"\n","This function updates activity code status with new values according to the parameters passed."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)("span",{class:"bold-large",children:(0,t.jsx)(n.strong,{children:"\ud83d\udccc Parameters"})}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Name"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"conn"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"psycopg2.extensions.connection"})}),(0,t.jsx)(n.td,{children:"Database connection object."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"table_name"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"Destination table."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"`enddate"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"pandas.DataFrame"})}),(0,t.jsx)(n.td,{children:"Contains dataframe that are going to be appended."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"status"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"Activity status."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"message"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"Error/success message explaining the status."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"activity_code"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"Activity code to the updated row."})]})]})]}),"\n",(0,t.jsx)("span",{class:"bold-large",children:(0,t.jsx)(n.strong,{children:"\ud83d\udccc Raises"})}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Error Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Exception"})}),(0,t.jsx)(n.td,{children:"Show error popped up when updating database."})]})})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)("span",{class:"bold-large",children:(0,t.jsx)(n.strong,{children:"\ud83d\udd37 Step 1 : Cursor Creation"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"cursor = conn.cursor()\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Cursor is used to execute SQL queries and fetch results from the database."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)("span",{class:"bold-large",children:(0,t.jsx)(n.strong,{children:"\ud83d\udd37 Step 2 : Construct and Execute Update Query"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'update_query = "UPDATE %s SET end_date = %%s, run_status =%%s, error_message = %%s WHERE activity_code = %%s" % table_name\r\ncursor.execute(update_query, (enddate, status, message, activity_code,))\n'})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Writes update query and execute data update on rows where the activity code matches."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)("span",{class:"bold-large",children:(0,t.jsx)(n.strong,{children:"\ud83d\udd37 Step 3 : Commit Update"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'conn.commit()\r\nprint(f"Data from DataFrame appended to the {table_name} table successfully.")\r\ncursor.close()\n'})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Permanently make changes in the database and show update success message."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)("span",{class:"bold-large",children:(0,t.jsx)(n.strong,{children:"\ud83d\udd37 Step 4 : Error Handling"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:' except Exception as e:\r\n        print(f"Error updating Log and other fields: {e}")\r\n        conn.rollback()\n'})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Shows error message if an error occured in data update. Rollback is done to prevent partial data insertion."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"\ufe0f-delete_dataconn-table_name-activity_code",children:(0,t.jsx)(n.strong,{children:"\u2699\ufe0f delete_data(conn, table_name, activity_code)"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def delete_data(conn, table_name, activity_code):\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Function Description"}),(0,t.jsx)(n.br,{}),"\n","This function deletes data from the database based on the activity code."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)("span",{class:"bold-large",children:(0,t.jsx)(n.strong,{children:"\ud83d\udccc Parameters"})}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Name"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"conn"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"psycopg2.extensions.connection"})}),(0,t.jsx)(n.td,{children:"Database connection object."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"table_name"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"Destination table."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"activity_code"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"Activity code to the deleted row."})]})]})]}),"\n",(0,t.jsx)("span",{class:"bold-large",children:(0,t.jsx)(n.strong,{children:"\ud83d\udccc Raises"})}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Error Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Exception"})}),(0,t.jsx)(n.td,{children:"Show error in deletion process."})]})})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)("span",{class:"bold-large",children:(0,t.jsx)(n.strong,{children:"\ud83d\udd37 Step 1 : Cursor Creation"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"cursor = conn.cursor()\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Cursor is used to execute SQL queries and fetch results from the database."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)("span",{class:"bold-large",children:(0,t.jsx)(n.strong,{children:"\ud83d\udd37 Step 2 : Construct and Execute Deletion Query"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:' delete_query = "DELETE FROM %s WHERE activity_code = %%s" % table_name\r\n cursor.execute(delete_query, (activity_code,))\n'})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Writes deletion query and execute data deletion on rows where the activity code matches."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)("span",{class:"bold-large",children:(0,t.jsx)(n.strong,{children:"\ud83d\udd37 Step 3 : Commit Deletion"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'conn.commit()\r\nprint(f"Row with activity_code {activity_code} deleted from the {table_name} table successfully.")\r\ncursor.close()\n'})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Permanently make changes in the database and show success deletion message."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)("span",{class:"bold-large",children:(0,t.jsx)(n.strong,{children:"\ud83d\udd37 Step 4 : Error Handling"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'except Exception as e:\r\n        print(f"Error deleting Log: {e}")\r\n        conn.rollback()\n'})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Shows error message if an error occured in data deletion. Rollback is done to prevent partial data insertion."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{})]})}function h(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);